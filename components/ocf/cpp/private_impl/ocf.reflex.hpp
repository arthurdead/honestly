// ocf.reflex.hpp generated by reflex 3.0.9 from /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex

#ifndef REFLEX_OCF_REFLEX_HPP
#define REFLEX_OCF_REFLEX_HPP
#define IN_HEADER 1
#define REFLEX_VERSION "3.0.9"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ocf::__private::location
#define REFLEX_OPTION_YYSTYPE             ocf::__private::parser::semantic_type
#define REFLEX_OPTION_batch               true
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ocf::__private
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "ocf.reflex.hpp"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               lexer
#define REFLEX_OPTION_namespace           ocf::__private
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "ocf.reflex.cpp"
#define REFLEX_OPTION_tables_file         "ocf.reflex_tables.cpp"
#define REFLEX_OPTION_token_eof           ocf::__private::parser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ocf::__private::parser::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 7 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"

#include "ocf.bison.hpp"
#include "location.hpp"
namespace ocf::__private { class parser; }


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ocf {
namespace __private {

class lexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 13 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"

ocf::__private::parser *__psr = nullptr;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual ocf::__private::location location(void)
  {
    ocf::__private::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ocf::__private::parser::symbol_type lex(void);
};

} // namespace ocf
} // namespace __private

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


#endif
