// ocf.reflex.cpp generated by reflex 3.0.9 from /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex

#define REFLEX_VERSION "3.0.9"

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  OPTIONS USED                                                              //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define REFLEX_OPTION_YYLTYPE             ocf::__private::location
#define REFLEX_OPTION_YYSTYPE             ocf::__private::parser::semantic_type
#define REFLEX_OPTION_batch               true
#define REFLEX_OPTION_bison_cc            true
#define REFLEX_OPTION_bison_cc_namespace  ocf::__private
#define REFLEX_OPTION_bison_cc_parser     parser
#define REFLEX_OPTION_bison_complete      true
#define REFLEX_OPTION_bison_locations     true
#define REFLEX_OPTION_full                true
#define REFLEX_OPTION_header_file         "ocf.reflex.hpp"
#define REFLEX_OPTION_lex                 lex
#define REFLEX_OPTION_lexer               lexer
#define REFLEX_OPTION_namespace           ocf::__private
#define REFLEX_OPTION_nodefault           true
#define REFLEX_OPTION_noindent            true
#define REFLEX_OPTION_noyywrap            true
#define REFLEX_OPTION_outfile             "ocf.reflex.cpp"
#define REFLEX_OPTION_tables_file         "ocf.reflex_tables.cpp"
#define REFLEX_OPTION_token_eof           ocf::__private::parser::symbol_type(0, location())
#define REFLEX_OPTION_token_type          ocf::__private::parser::symbol_type

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %top user code                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 7 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"

#include "ocf.bison.hpp"
#include "location.hpp"
namespace ocf::__private { class parser; }


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  REGEX MATCHER                                                             //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#define WITH_NO_INDENT
#include <reflex/matcher.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  ABSTRACT LEXER CLASS                                                      //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#include <reflex/abslexer.h>

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  LEXER CLASS                                                               //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ocf {
namespace __private {

class lexer : public reflex::AbstractLexer<reflex::Matcher> {
#line 13 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"

ocf::__private::parser *__psr = nullptr;

 public:
  typedef reflex::AbstractLexer<reflex::Matcher> AbstractBaseLexer;
  lexer(
      const reflex::Input& input = reflex::Input(),
      std::ostream&        os    = std::cout)
    :
      AbstractBaseLexer(input, os)
  {
  }
  static const int INITIAL = 0;
  std::string filename;
  virtual ocf::__private::location location(void)
  {
    ocf::__private::location yylloc;
    yylloc.begin.filename = &filename;
    yylloc.begin.line = static_cast<unsigned int>(matcher().lineno());
    yylloc.begin.column = static_cast<unsigned int>(matcher().columno());
    yylloc.end.filename = &filename;
    yylloc.end.line = static_cast<unsigned int>(matcher().lineno_end());
    yylloc.end.column = static_cast<unsigned int>(matcher().columno_end());
    return yylloc;
  }
  virtual ocf::__private::parser::symbol_type lex(void);
};

} // namespace ocf
} // namespace __private

////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 1: %{ user code %}                                                //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

#line 31 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"

#include "ocf.bison.hpp"
#include <ctl/string>
#include <ctl/string_view>
#include <ctl/charconv>
#include <algorithm>

using namespace std::literals::string_literals;
using namespace std::literals::string_view_literals;

template <typename T>
static bool __process_str(T &value, int type, bool chr, bool raw) noexcept
{
	if(!raw) {
		switch(type) {
			case 8:
			{ value.erase(value.begin(), value.begin()+3); break; }
			case 16:
			case 32:
			case 64:
			{ value.erase(value.begin(), value.begin()+2); break; }
			default:
			{ value.erase(value.begin()); break; }
		}
		value.pop_back();

		typename T::iterator it{value.begin()};

		while(it != value.end()) {
			bool ignore{false};
			switch(*it) {
				case '\\': {
					switch(*(it+1)) {
						case 'n': { value.erase(it, it+2); value.insert(it, '\n'); ++it; break; }
						case 't': { value.erase(it, it+2); value.insert(it, '\t'); ++it; break; }
						case 'v': { value.erase(it, it+2); value.insert(it, '\v'); ++it; break; }
						case 'f': { value.erase(it, it+2); value.insert(it, '\f'); ++it; break; }
						case 'r': { value.erase(it, it+2); value.insert(it, '\r'); ++it; break; }
						case '\'': { value.erase(it, it+2); value.insert(it, '\''); ++it; break; }
						case '"': { value.erase(it, it+2); value.insert(it, '"'); ++it; break; }
						case '?': { value.erase(it, it+2); value.insert(it, '\?'); ++it; break; }
						case 'a': { value.erase(it, it+2); value.insert(it, '\a'); ++it; break; }
						case 'b': { value.erase(it, it+2); value.insert(it, '\b'); ++it; break; }
						case '\\': { value.erase(it); ++it; break; }
						default: { return false; }
					}
					ignore = true;
					break;
				}
				default: { break; }
			}
			if(!ignore) {
				++it;
			}
		}

		if(chr) {

		}
	} else {
		value.erase(value.begin(), value.begin()+2);
		value.pop_back();

		T delim_start;
		while(*value.begin() != '(') {
			delim_start += *value.begin();
			value.erase(value.begin());
		}
		value.erase(value.begin());

		T delim_end;
		while(value.back() != ')') {
			delim_end.insert(delim_end.begin(), value.back());
			value.pop_back();
		}
		value.pop_back();

		if(delim_start != delim_end) {
			return false;
		}
	}

	return true;
}

template <typename T>
static bool __process_char_str(T &value, int type) noexcept
{
	if(!__process_str(value, type, true, false)) {
		return false;
	}

	return true;
}

static bool __process_float_str(std::string &str, int type, bool hex) noexcept
{
	std::string::iterator it{str.begin()};
	if(hex) {
		str.erase(it, it+2);
	}

	if(type > 0) {
		it = str.end();
		str.erase(it-type, it);
	}

	return true;
}

static bool __process_int_str(std::string &str, int type, int base) noexcept
{
	std::string::iterator it{str.begin()};
	switch(base) {
		case 2:
		case 16:
		{ str.erase(it, it+2); break; }
		case 8:
		{ break; }
		default: { break; }
	}

	if(type > 0) {
		it = str.end();
		str.erase(it-type, it);
	}

	if(base == 10) {
		it = str.begin();
		while(it != str.end()) {
			if(*it == '\'') {
				str.erase(it);
				continue;
			}
			++it;
		}
	}

	return true;
}


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  BISON C++                                                                 //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
//                                                                            //
//  SECTION 2: rules                                                          //
//                                                                            //
////////////////////////////////////////////////////////////////////////////////

namespace ocf {
namespace __private {
extern const reflex::Pattern::Opcode reflex_code_INITIAL[];
} // namespace ocf
} // namespace __private

ocf::__private::parser::symbol_type ocf::__private::lexer::lex(void)
{
  static const reflex::Pattern PATTERN_INITIAL(reflex_code_INITIAL);
  if (!has_matcher())
  {
    matcher(new Matcher(PATTERN_INITIAL, stdinit(), this));
    matcher().buffer();
  }
  while (true)
  {
        switch (matcher().scan())
        {
          case 0:
            if (matcher().at_end())
            {
#line 490 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_OCFEOF(location()); }

            }
            else
            {
              lexer_error("scanner jammed");
              return ocf::__private::parser::symbol_type();
            }
            break;
          case 1: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:174: "this" :
#line 174 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_THIS(location()); }

            break;
          case 2: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:176: "true" :
#line 176 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_BOOL_LITERAL(true, location()); }
            break;
          case 3: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:177: "false" :
#line 177 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_BOOL_LITERAL(false, location()); }

            break;
          case 4: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:179: u8{raw_str_literal} :
#line 179 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
#ifdef __cpp_char8_t
	std::u8string value{ctl::to_string<std::u8string>(str())};
#else
	std::u8string value{str()};
#endif
	__process_str(value, 8, false, true);
	return __psr->make_U8STRING_LITERAL(std::move(value), location());
}
            break;
          case 5: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:188: u{raw_str_literal} :
#line 188 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::u16string value{ctl::to_string<std::u16string>(str())};
	__process_str(value, 16, false, true);
	return __psr->make_U16STRING_LITERAL(std::move(value), location());
}
            break;
          case 6: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:193: U{raw_str_literal} :
#line 193 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::u32string value{ctl::to_string<std::u32string>(str())};
	__process_str(value, 32, false, true);
	return __psr->make_U32STRING_LITERAL(std::move(value), location());
}
            break;
          case 7: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:198: L{raw_str_literal} :
#line 198 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::wstring value{wstr()};
	__process_str(value, 64, false, true);
	return __psr->make_WSTRING_LITERAL(std::move(value), location());
}
            break;
          case 8: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:203: {raw_str_literal} :
#line 203 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_str(value, 0, false, true);
	return __psr->make_STRING_LITERAL(std::move(value), location());
}

            break;
          case 9: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:209: u8{str_literal} :
#line 209 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
#ifdef __cpp_char8_t
	std::u8string value{ctl::to_string<std::u8string>(str())};
#else
	std::u8string value{str()};
#endif
	__process_str(value, 8, false, false);
	return __psr->make_U8STRING_LITERAL(std::move(value), location());
}
            break;
          case 10: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:218: u{str_literal} :
#line 218 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::u16string value{ctl::to_string<std::u16string>(str())};
	__process_str(value, 16, false, false);
	return __psr->make_U16STRING_LITERAL(std::move(value), location());
}
            break;
          case 11: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:223: U{str_literal} :
#line 223 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::u32string value{ctl::to_string<std::u32string>(str())};
	__process_str(value, 32, false, false);
	return __psr->make_U32STRING_LITERAL(std::move(value), location());
}
            break;
          case 12: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:228: L{str_literal} :
#line 228 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::wstring value{wstr()};
	__process_str(value, 64, false, false);
	return __psr->make_WSTRING_LITERAL(std::move(value), location());
}
            break;
          case 13: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:233: {str_literal} :
#line 233 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_str(value, 0, false, false);
	return __psr->make_STRING_LITERAL(std::move(value), location());
}

            break;
          case 14: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:239: u8{chr_literal} :
#line 239 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_char_str(value, 8);
#ifdef __cpp_char8_t
	return __psr->make_U8CHAR_LITERAL(ctl::to_u8char(value)[0], location());
#else
	return __psr->make_U8CHAR_LITERAL(static_cast<char8_t>(value[0]), location());
#endif
}
            break;
          case 15: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:248: u{chr_literal} :
#line 248 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_char_str(value, 16);
	return __psr->make_U16CHAR_LITERAL(ctl::to_char<char16_t>(value), location());
}
            break;
          case 16: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:253: U{chr_literal} :
#line 253 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_char_str(value, 32);
	return __psr->make_U32CHAR_LITERAL(ctl::to_char<char32_t>(value), location());
}
            break;
          case 17: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:258: L{chr_literal} :
#line 258 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::wstring value{wstr()};
	__process_char_str(value, 64);
	return __psr->make_WCHAR_LITERAL(value[0], location());
}

            break;
          case 18: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:264: {hex_dbl_literal}[lL] :
#line 264 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_float_str(value, 1, true);
	return __psr->make_LONG_DOUBLE_LITERAL(ctl::to_floating<long double>(value, std::chars_format::hex), location());
}
            break;
          case 19: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:269: {hex_dbl_literal}[fF] :
#line 269 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_float_str(value, 1, true);
	return __psr->make_FLOAT_LITERAL(ctl::to_floating<float>(value, std::chars_format::hex), location());
}
            break;
          case 20: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:274: {dbl_literal}[fF] :
#line 274 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_float_str(value, 1, false);
	return __psr->make_FLOAT_LITERAL(ctl::to_floating<float>(value), location());
}
            break;
          case 21: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:279: {dbl_literal}[lL] :
#line 279 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_float_str(value, 1, false);
	return __psr->make_LONG_DOUBLE_LITERAL(ctl::to_floating<long double>(value), location());
}

            break;
          case 22: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:285: {hex_dbl_literal} :
#line 285 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_float_str(value, 0, true);
	return __psr->make_DOUBLE_LITERAL(ctl::to_floating<double>(value, std::chars_format::hex), location());
}
            break;
          case 23: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:290: {dbl_literal} :
#line 290 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_float_str(value, 0, false);
	return __psr->make_DOUBLE_LITERAL(ctl::to_floating<double>(value), location());
}

            break;
          case 24: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:296: {hex_int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) :
#line 296 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 3, 16);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value, 16), location());
}
            break;
          case 25: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:301: {hex_int_literal}(?:[lL][uU]|[uU][lL]) :
#line 301 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 16);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value, 16), location());
}
            break;
          case 26: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:306: {hex_int_literal}(?:[zZ][uU]|[uU][zZ]) :
#line 306 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 16);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value, 16), location());
}
            break;
          case 27: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:311: {hex_int_literal}[lL]{2} :
#line 311 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 16);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value, 16), location());
}
            break;
          case 28: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:316: {hex_int_literal}[lL] :
#line 316 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 16);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value, 16), location());
}
            break;
          case 29: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:321: {hex_int_literal}[zZ] :
#line 321 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 16);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value, 16), location());
}
            break;
          case 30: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:326: {hex_int_literal}[uU] :
#line 326 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 16);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value, 16), location());
}

            break;
          case 31: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:332: {bin_int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) :
#line 332 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 3, 2);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value, 2), location());
}
            break;
          case 32: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:337: {bin_int_literal}(?:[lL][uU]|[uU][lL]) :
#line 337 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 2);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value, 2), location());
}
            break;
          case 33: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:342: {bin_int_literal}(?:[zZ][uU]|[uU][zZ]) :
#line 342 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 2);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value, 2), location());
}
            break;
          case 34: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:347: {bin_int_literal}[lL]{2} :
#line 347 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 2);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value, 2), location());
}
            break;
          case 35: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:352: {bin_int_literal}[lL] :
#line 352 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 2);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value, 2), location());
}
            break;
          case 36: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:357: {bin_int_literal}[zZ] :
#line 357 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 2);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value, 2), location());
}
            break;
          case 37: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:362: {bin_int_literal}[uU] :
#line 362 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 2);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value, 2), location());
}

            break;
          case 38: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:368: {oct_int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) :
#line 368 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 3, 8);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value, 8), location());
}
            break;
          case 39: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:373: {oct_int_literal}(?:[lL][uU]|[uU][lL]) :
#line 373 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 8);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value, 8), location());
}
            break;
          case 40: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:378: {oct_int_literal}(?:[zZ][uU]|[uU][zZ]) :
#line 378 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 8);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value, 8), location());
}
            break;
          case 41: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:383: {oct_int_literal}[lL]{2} :
#line 383 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 8);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value, 8), location());
}
            break;
          case 42: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:388: {oct_int_literal}[lL] :
#line 388 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 8);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value, 8), location());
}
            break;
          case 43: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:393: {oct_int_literal}[zZ] :
#line 393 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 8);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value, 8), location());
}
            break;
          case 44: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:398: {oct_int_literal}[uU] :
#line 398 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 8);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value, 8), location());
}

            break;
          case 45: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:404: {int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) :
#line 404 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 3, 10);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value), location());
}
            break;
          case 46: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:409: {int_literal}(?:[lL][uU]|[uU][lL]) :
#line 409 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 10);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value), location());
}
            break;
          case 47: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:414: {int_literal}(?:[zZ][uU]|[uU][zZ]) :
#line 414 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 10);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value), location());
}
            break;
          case 48: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:419: {int_literal}[lL]{2} :
#line 419 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 2, 10);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value), location());
}
            break;
          case 49: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:424: {int_literal}[lL] :
#line 424 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 10);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value), location());
}
            break;
          case 50: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:429: {int_literal}[zZ] :
#line 429 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 10);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value), location());
}
            break;
          case 51: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:434: {int_literal}[uU] :
#line 434 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 1, 10);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value), location());
}

            break;
          case 52: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:440: {hex_int_literal} :
#line 440 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 0, 16);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value, 16), location());
}
            break;
          case 53: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:445: {bin_int_literal} :
#line 445 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 0, 2);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value, 2), location());
}
            break;
          case 54: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:450: {oct_int_literal} :
#line 450 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 0, 8);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value, 8), location());
}
            break;
          case 55: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:455: {int_literal} :
#line 455 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_int_str(value, 0, 10);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value), location());
}

            break;
          case 56: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:461: {chr_literal} :
#line 461 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{
	std::string value{str()};
	__process_char_str(value, 0);
	return __psr->make_CHAR_LITERAL(value[0], location());
}

            break;
          case 57: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:467: "{" :
#line 467 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_OPEN_BRACE(location()); }
            break;
          case 58: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:468: "}" :
#line 468 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_CLOSE_BRACE(location()); }

            break;
          case 59: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:470: "(" :
#line 470 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_OPEN_PARENTHESIS(location()); }
            break;
          case 60: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:471: ")" :
#line 471 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_CLOSE_PARENTHESIS(location()); }

            break;
          case 61: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:473: "[" :
#line 473 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_OPEN_BRACKET(location()); }
            break;
          case 62: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:474: "]" :
#line 474 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_CLOSE_BRACKET(location()); }

            break;
          case 63: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:476: "<" :
#line 476 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_LESSER(location()); }
            break;
          case 64: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:477: ">" :
#line 477 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_GREATER(location()); }

            break;
          case 65: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:479: "|" :
#line 479 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_BITWISE_OR(location()); }

            break;
          case 66: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:481: "=" :
#line 481 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_EQUAL(location()); }
            break;
          case 67: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:482: ":" :
#line 482 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_COLON(location()); }
            break;
          case 68: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:483: "::" :
#line 483 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_DOUBLE_COLON(location()); }
            break;
          case 69: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:484: ";" :
#line 484 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_SEMICOLON(location()); }
            break;
          case 70: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:485: "," :
#line 485 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_COMMA(location()); }

            break;
          case 71: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:487: \n :
#line 487 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{  }
            break;
          case 72: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:488: [ \t]+ :
#line 488 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{  }

            break;
          case 73: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:492: {identifier} :
#line 492 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ return __psr->make_IDENTIFIER(text(), location()); }

            break;
          case 74: // rule /home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex:494: . :
#line 494 "/home/arthurdead/Desktop/temp/honestly/components/ocf/reflex/ocf.reflex"
{ std::wcout << L"invalid: "sv << wstr() << L" ("sv << (wchar_t)wchr() << L')' << L'\n'; return __psr->make_OCFUNDEF(location()); }
            break;
        }
  }
}
