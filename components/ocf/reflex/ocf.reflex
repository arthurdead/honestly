%option full batch nodefault noindent noyywrap
%option namespace="ocf::__private" lexer="lexer"
%option outfile="ocf.reflex.cpp" header-file="ocf.reflex.hpp"
%option tables-file="ocf.reflex_tables.cpp"
%option bison-complete bison-locations bison-cc-namespace="ocf::__private"

%top {
#include "ocf.bison.hpp"
#include "location.hpp"
namespace ocf::__private { class parser; }
%}

%class {
ocf::__private::parser *__psr = nullptr;
}

identifier [_a-zA-Z][_a-zA-Z0-9]*
str_literal \"(?:[^"\\\n]|\\.)*\"
raw_str_literal R\"({identifier}?)\((?:[^"\\]|\\.)*\){identifier}?\"
chr_literal '(?:[^'\\\n]|\\.)*'
int_literal [-+]?(?:0|[1-9]+(?:'[0-9]+)*)
oct_int_literal [-+]?0[1-9]+
hex_int_literal [-+]?0[xX][0-9a-fA-F]+
bin_int_literal [-+]?0[bB][01]+
dbl_expo_noint [1-9]+[EePp][-+]?[0-9]+
dbl_expo {dbl_expo_noint}|[0-9]+
dbl_literal_base [0-9]+\.{dbl_expo}?|\.{dbl_expo}|{dbl_expo_noint}
dbl_literal [-+]?{dbl_literal_base}
hex_dbl_literal [-+]?0[xX]{dbl_literal_base}

%{
#include "ocf.bison.hpp"
#include <ctl/string>
#include <ctl/string_view>
#include <ctl/charconv>
#include <algorithm>

using namespace std::literals::string_literals;
using namespace std::literals::string_view_literals;

template <typename T>
static bool __process_str(T &value, int type, bool chr, bool raw) noexcept
{
	if(!raw) {
		switch(type) {
			case 8:
			{ value.erase(value.begin(), value.begin()+3); break; }
			case 16:
			case 32:
			case 64:
			{ value.erase(value.begin(), value.begin()+2); break; }
			default:
			{ value.erase(value.begin()); break; }
		}
		value.pop_back();

		typename T::iterator it{value.begin()};

		while(it != value.end()) {
			bool ignore{false};
			switch(*it) {
				case '\\': {
					switch(*(it+1)) {
						case 'n': { value.erase(it, it+2); value.insert(it, '\n'); ++it; break; }
						case 't': { value.erase(it, it+2); value.insert(it, '\t'); ++it; break; }
						case 'v': { value.erase(it, it+2); value.insert(it, '\v'); ++it; break; }
						case 'f': { value.erase(it, it+2); value.insert(it, '\f'); ++it; break; }
						case 'r': { value.erase(it, it+2); value.insert(it, '\r'); ++it; break; }
						case '\'': { value.erase(it, it+2); value.insert(it, '\''); ++it; break; }
						case '"': { value.erase(it, it+2); value.insert(it, '"'); ++it; break; }
						case '?': { value.erase(it, it+2); value.insert(it, '\?'); ++it; break; }
						case 'a': { value.erase(it, it+2); value.insert(it, '\a'); ++it; break; }
						case 'b': { value.erase(it, it+2); value.insert(it, '\b'); ++it; break; }
						case '\\': { value.erase(it); ++it; break; }
						default: { return false; }
					}
					ignore = true;
					break;
				}
				default: { break; }
			}
			if(!ignore) {
				++it;
			}
		}

		if(chr) {
			
		}
	} else {
		value.erase(value.begin(), value.begin()+2);
		value.pop_back();

		T delim_start;
		while(*value.begin() != '(') {
			delim_start += *value.begin();
			value.erase(value.begin());
		}
		value.erase(value.begin());

		T delim_end;
		while(value.back() != ')') {
			delim_end.insert(delim_end.begin(), value.back());
			value.pop_back();
		}
		value.pop_back();

		if(delim_start != delim_end) {
			return false;
		}
	}

	return true;
}

template <typename T>
static bool __process_char_str(T &value, int type) noexcept
{
	if(!__process_str(value, type, true, false)) {
		return false;
	}

	return true;
}

static bool __process_float_str(std::string &str, int type, bool hex) noexcept
{
	std::string::iterator it{str.begin()};
	if(hex) {
		str.erase(it, it+2);
	}

	if(type > 0) {
		it = str.end();
		str.erase(it-type, it);
	}

	return true;
}

static bool __process_int_str(std::string &str, int type, int base) noexcept
{
	std::string::iterator it{str.begin()};
	switch(base) {
		case 2:
		case 16:
		{ str.erase(it, it+2); break; }
		case 8:
		{ break; }
		default: { break; }
	}

	if(type > 0) {
		it = str.end();
		str.erase(it-type, it);
	}

	if(base == 10) {
		it = str.begin();
		while(it != str.end()) {
			if(*it == '\'') {
				str.erase(it);
				continue;
			}
			++it;
		}
	}

	return true;
}
%}

%%
"this" { return __psr->make_THIS(location()); }

"true" { return __psr->make_BOOL_LITERAL(true, location()); }
"false" { return __psr->make_BOOL_LITERAL(false, location()); }

u8{raw_str_literal} {
#ifdef __cpp_char8_t
	std::u8string value{ctl::to_string<std::u8string>(str())};
#else
	std::u8string value{str()};
#endif
	__process_str(value, 8, false, true);
	return __psr->make_U8STRING_LITERAL(std::move(value), location());
}
u{raw_str_literal} {
	std::u16string value{ctl::to_string<std::u16string>(str())};
	__process_str(value, 16, false, true);
	return __psr->make_U16STRING_LITERAL(std::move(value), location());
}
U{raw_str_literal} {
	std::u32string value{ctl::to_string<std::u32string>(str())};
	__process_str(value, 32, false, true);
	return __psr->make_U32STRING_LITERAL(std::move(value), location());
}
L{raw_str_literal} {
	std::wstring value{wstr()};
	__process_str(value, 64, false, true);
	return __psr->make_WSTRING_LITERAL(std::move(value), location());
}
{raw_str_literal} {
	std::string value{str()};
	__process_str(value, 0, false, true);
	return __psr->make_STRING_LITERAL(std::move(value), location());
}

u8{str_literal} {
#ifdef __cpp_char8_t
	std::u8string value{ctl::to_string<std::u8string>(str())};
#else
	std::u8string value{str()};
#endif
	__process_str(value, 8, false, false);
	return __psr->make_U8STRING_LITERAL(std::move(value), location());
}
u{str_literal} {
	std::u16string value{ctl::to_string<std::u16string>(str())};
	__process_str(value, 16, false, false);
	return __psr->make_U16STRING_LITERAL(std::move(value), location());
}
U{str_literal} {
	std::u32string value{ctl::to_string<std::u32string>(str())};
	__process_str(value, 32, false, false);
	return __psr->make_U32STRING_LITERAL(std::move(value), location());
}
L{str_literal} {
	std::wstring value{wstr()};
	__process_str(value, 64, false, false);
	return __psr->make_WSTRING_LITERAL(std::move(value), location());
}
{str_literal} {
	std::string value{str()};
	__process_str(value, 0, false, false);
	return __psr->make_STRING_LITERAL(std::move(value), location());
}

u8{chr_literal} {
	std::string value{str()};
	__process_char_str(value, 8);
#ifdef __cpp_char8_t
	return __psr->make_U8CHAR_LITERAL(ctl::to_u8char(value)[0], location());
#else
	return __psr->make_U8CHAR_LITERAL(static_cast<char8_t>(value[0]), location());
#endif
}
u{chr_literal} {
	std::string value{str()};
	__process_char_str(value, 16);
	return __psr->make_U16CHAR_LITERAL(ctl::to_char<char16_t>(value), location());
}
U{chr_literal} {
	std::string value{str()};
	__process_char_str(value, 32);
	return __psr->make_U32CHAR_LITERAL(ctl::to_char<char32_t>(value), location());
}
L{chr_literal} {
	std::wstring value{wstr()};
	__process_char_str(value, 64);
	return __psr->make_WCHAR_LITERAL(value[0], location());
}

{hex_dbl_literal}[lL] {
	std::string value{str()};
	__process_float_str(value, 1, true);
	return __psr->make_LONG_DOUBLE_LITERAL(ctl::to_floating<long double>(value, std::chars_format::hex), location());
}
{hex_dbl_literal}[fF] {
	std::string value{str()};
	__process_float_str(value, 1, true);
	return __psr->make_FLOAT_LITERAL(ctl::to_floating<float>(value, std::chars_format::hex), location());
}
{dbl_literal}[fF] {
	std::string value{str()};
	__process_float_str(value, 1, false);
	return __psr->make_FLOAT_LITERAL(ctl::to_floating<float>(value), location());
}
{dbl_literal}[lL] {
	std::string value{str()};
	__process_float_str(value, 1, false);
	return __psr->make_LONG_DOUBLE_LITERAL(ctl::to_floating<long double>(value), location());
}

{hex_dbl_literal} {
	std::string value{str()};
	__process_float_str(value, 0, true);
	return __psr->make_DOUBLE_LITERAL(ctl::to_floating<double>(value, std::chars_format::hex), location());
}
{dbl_literal} {
	std::string value{str()};
	__process_float_str(value, 0, false);
	return __psr->make_DOUBLE_LITERAL(ctl::to_floating<double>(value), location());
}

{hex_int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) {
	std::string value{str()};
	__process_int_str(value, 3, 16);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value, 16), location());
}
{hex_int_literal}(?:[lL][uU]|[uU][lL]) {
	std::string value{str()};
	__process_int_str(value, 2, 16);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value, 16), location());
}
{hex_int_literal}(?:[zZ][uU]|[uU][zZ]) {
	std::string value{str()};
	__process_int_str(value, 2, 16);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value, 16), location());
}
{hex_int_literal}[lL]{2} {
	std::string value{str()};
	__process_int_str(value, 2, 16);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value, 16), location());
}
{hex_int_literal}[lL] {
	std::string value{str()};
	__process_int_str(value, 1, 16);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value, 16), location());
}
{hex_int_literal}[zZ] {
	std::string value{str()};
	__process_int_str(value, 1, 16);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value, 16), location());
}
{hex_int_literal}[uU] {
	std::string value{str()};
	__process_int_str(value, 1, 16);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value, 16), location());
}

{bin_int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) {
	std::string value{str()};
	__process_int_str(value, 3, 2);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value, 2), location());
}
{bin_int_literal}(?:[lL][uU]|[uU][lL]) {
	std::string value{str()};
	__process_int_str(value, 2, 2);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value, 2), location());
}
{bin_int_literal}(?:[zZ][uU]|[uU][zZ]) {
	std::string value{str()};
	__process_int_str(value, 2, 2);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value, 2), location());
}
{bin_int_literal}[lL]{2} {
	std::string value{str()};
	__process_int_str(value, 2, 2);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value, 2), location());
}
{bin_int_literal}[lL] {
	std::string value{str()};
	__process_int_str(value, 1, 2);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value, 2), location());
}
{bin_int_literal}[zZ] {
	std::string value{str()};
	__process_int_str(value, 1, 2);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value, 2), location());
}
{bin_int_literal}[uU] {
	std::string value{str()};
	__process_int_str(value, 1, 2);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value, 2), location());
}

{oct_int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) {
	std::string value{str()};
	__process_int_str(value, 3, 8);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value, 8), location());
}
{oct_int_literal}(?:[lL][uU]|[uU][lL]) {
	std::string value{str()};
	__process_int_str(value, 2, 8);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value, 8), location());
}
{oct_int_literal}(?:[zZ][uU]|[uU][zZ]) {
	std::string value{str()};
	__process_int_str(value, 2, 8);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value, 8), location());
}
{oct_int_literal}[lL]{2} {
	std::string value{str()};
	__process_int_str(value, 2, 8);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value, 8), location());
}
{oct_int_literal}[lL] {
	std::string value{str()};
	__process_int_str(value, 1, 8);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value, 8), location());
}
{oct_int_literal}[zZ] {
	std::string value{str()};
	__process_int_str(value, 1, 8);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value, 8), location());
}
{oct_int_literal}[uU] {
	std::string value{str()};
	__process_int_str(value, 1, 8);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value, 8), location());
}

{int_literal}(?:[lL]{2}[uU]|[uU][lL]{2}) {
	std::string value{str()};
	__process_int_str(value, 3, 10);
	return __psr->make_UNSIGNED_LONG_LONG_LITERAL(ctl::to_integer<unsigned long long>(value), location());
}
{int_literal}(?:[lL][uU]|[uU][lL]) {
	std::string value{str()};
	__process_int_str(value, 2, 10);
	return __psr->make_UNSIGNED_LONG_LITERAL(ctl::to_integer<unsigned long>(value), location());
}
{int_literal}(?:[zZ][uU]|[uU][zZ]) {
	std::string value{str()};
	__process_int_str(value, 2, 10);
	return __psr->make_SIZE_LITERAL(ctl::to_integer<std::size_t>(value), location());
}
{int_literal}[lL]{2} {
	std::string value{str()};
	__process_int_str(value, 2, 10);
	return __psr->make_LONG_LONG_LITERAL(ctl::to_integer<long long>(value), location());
}
{int_literal}[lL] {
	std::string value{str()};
	__process_int_str(value, 1, 10);
	return __psr->make_LONG_LITERAL(ctl::to_integer<long>(value), location());
}
{int_literal}[zZ] {
	std::string value{str()};
	__process_int_str(value, 1, 10);
	return __psr->make_SSIZE_LITERAL(ctl::to_integer<ctl::ssize_t>(value), location());
}
{int_literal}[uU] {
	std::string value{str()};
	__process_int_str(value, 1, 10);
	return __psr->make_UNSIGNED_INT_LITERAL(ctl::to_integer<unsigned int>(value), location());
}

{hex_int_literal} {
	std::string value{str()};
	__process_int_str(value, 0, 16);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value, 16), location());
}
{bin_int_literal} {
	std::string value{str()};
	__process_int_str(value, 0, 2);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value, 2), location());
}
{oct_int_literal} {
	std::string value{str()};
	__process_int_str(value, 0, 8);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value, 8), location());
}
{int_literal} {
	std::string value{str()};
	__process_int_str(value, 0, 10);
	return __psr->make_INT_LITERAL(ctl::to_integer<int>(value), location());
}

{chr_literal} {
	std::string value{str()};
	__process_char_str(value, 0);
	return __psr->make_CHAR_LITERAL(value[0], location());
}

"{" { return __psr->make_OPEN_BRACE(location()); }
"}" { return __psr->make_CLOSE_BRACE(location()); }

"(" { return __psr->make_OPEN_PARENTHESIS(location()); }
")" { return __psr->make_CLOSE_PARENTHESIS(location()); }

"[" { return __psr->make_OPEN_BRACKET(location()); }
"]" { return __psr->make_CLOSE_BRACKET(location()); }

"<" { return __psr->make_LESSER(location()); }
">" { return __psr->make_GREATER(location()); }

"|" { return __psr->make_BITWISE_OR(location()); }

"=" { return __psr->make_EQUAL(location()); }
":" { return __psr->make_COLON(location()); }
"::" { return __psr->make_DOUBLE_COLON(location()); }
";" { return __psr->make_SEMICOLON(location()); }
"," { return __psr->make_COMMA(location()); }

\n {  }
[ \t]+ {  }

<<EOF>> { return __psr->make_OCFEOF(location()); }

{identifier} { return __psr->make_IDENTIFIER(text(), location()); }

. { std::wcout << L"invalid: "sv << wstr() << L" ("sv << (wchar_t)wchr() << L')' << L'\n'; return __psr->make_OCFUNDEF(location()); }
%%