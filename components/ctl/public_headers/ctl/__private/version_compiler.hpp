#define CTL_COMPILER_FLAG_MSVC (1 << 0)
#define CTL_COMPILER_FLAG_CLANG (1 << 1)
#define CTL_COMPILER_FLAG_GCC (1 << 2)
#define CTL_COMPILER_FLAG_ZAPCC (1 << 3)
#define CTL_COMPILER_FLAG_MINGW (1 << 4)
#define __CTL_COMPILER_FLAGS_LAST_BIT 4

#define __CLANG_FLAGS (CTL_COMPILER_FLAG_GCC|CTL_COMPILER_FLAG_CLANG)
#define __CLANG_CL_FLAGS (__CLANG_FLAGS|CTL_COMPILER_FLAG_MSVC)
#define __MINGW_FLAGS (CTL_COMPILER_FLAG_MINGW|CTL_COMPILER_FLAG_MSVC|CTL_COMPILER_FLAG_GCC)

#define CTL_COMPILER_GCC ((1 << (__CTL_COMPILER_FLAGS_LAST_BIT+1))|CTL_COMPILER_FLAG_GCC)
#define CTL_COMPILER_CLANG ((1 << (__CTL_COMPILER_FLAGS_LAST_BIT+2))|__CLANG_FLAGS)
#define CTL_COMPILER_CLANG_CL ((1 << (__CTL_COMPILER_FLAGS_LAST_BIT+3))|__CLANG_CL_FLAGS)
#define CTL_COMPILER_MSVC (1 << (__CTL_COMPILER_FLAGS_LAST_BIT+4)|CTL_COMPILER_FLAG_MSVC)
#define CTL_COMPILER_MINGW (1 << (__CTL_COMPILER_FLAGS_LAST_BIT+5)|__MINGW_FLAGS)
#define CTL_COMPILER_WINEGCC (1 << (__CTL_COMPILER_FLAGS_LAST_BIT+6)|__MINGW_FLAGS)
#define CTL_COMPILER_ZAPCC ((1 << (__CTL_COMPILER_FLAGS_LAST_BIT+7))|__CLANG_FLAGS|CTL_COMPILER_FLAG_ZAPCC)
#define CTL_COMPILER_ZAPCC_CL ((1 << (__CTL_COMPILER_FLAGS_LAST_BIT+8))|__CLANG_CL_FLAGS|CTL_COMPILER_FLAG_ZAPCC)
#define CTL_COMPILER_CLANG_EMSCRIPTEN ((1 << (__CTL_COMPILER_FLAGS_LAST_BIT+9))|__CLANG_FLAGS)

#ifdef __WINE__
	#define CTL_COMPILER CTL_COMPILER_WINEGCC
#elif defined __MINGW32__ || defined __MINGW64__
	#define CTL_COMPILER CTL_COMPILER_MINGW
#elif defined _MSC_VER && defined __clang__
	#if defined __ZAPCC__
		#define CTL_COMPILER CTL_COMPILER_ZAPCC_CL
	#else
		#define CTL_COMPILER CTL_COMPILER_CLANG_CL
	#endif
#elif defined __clang__
	#ifdef __ZAPCC__
		#define CTL_COMPILER CTL_COMPILER_ZAPCC
	#elif defined __EMSCRIPTEN__
		#define CTL_COMPILER CTL_COMPILER_CLANG_EMSCRIPTEN
	#else
		#define CTL_COMPILER CTL_COMPILER_CLANG
	#endif
#elif defined __GNUC__
	#define CTL_COMPILER CTL_COMPILER_GCC
#elif defined _MSC_VER
	#define CTL_COMPILER CTL_COMPILER_MSVC
#else
	#error
#endif

#define __CTL_MAKE_GCC_VERSION(j, m, p) (((j * 10000) +  (m * 100)) + p)
#define __CTL_MAKE_CLANG_VERSION(j, m, p) (((j * 10000) +  (m * 100)) + p)
#define __CTL_MAKE_MSVC_VERSION(j, m, p) (((j * 100000) +  (m * 10)) + p)

#if CTL_COMPILER & CTL_COMPILER_FLAG_GCC
	#if __GNUC__ >= 3
		#define __CTL_GCC_VERSION __CTL_MAKE_GCC_VERSION(__GNUC__, __GNUC_MINOR__, __GNUC_PATCHLEVEL__)
	#else
		#define __CTL_GCC_VERSION __CTL_MAKE_GCC_VERSION(__GNUC__, __GNUC_MINOR__, 0)
	#endif
#else
	#define __CTL_GCC_VERSION 0
#endif

#if CTL_COMPILER & CTL_COMPILER_FLAG_CLANG
	#define __CTL_CLANG_VERSION __CTL_MAKE_CLANG_VERSION(__clang_major__, __clang_minor__, __clang_patchlevel__)
#else
	#define __CTL_CLANG_VERSION 0
#endif

#if CTL_COMPILER & CTL_COMPILER_FLAG_MSVC
	#define __CTL_MSVC_VERSION _MSC_FULL_VER
#else
	#define __CTL_MSVC_VERSION 0
#endif

#define CTL_GCC_VERSION_CMP(op, j, m, p) (__CTL_GCC_VERSION op __CTL_MAKE_GCC_VERSION(j, m, p))
#define CTL_CLANG_VERSION_CMP(op, j, m, p) (__CTL_CLANG_VERSION op __CTL_MAKE_CLANG_VERSION(j, m, p))
#define CTL_MSVC_VERSION_CMP(op, j, m, p) (__CTL_MSVC_VERSION op __CTL_MAKE_MSVC_VERSION(j, m, p))

#if CTL_CLANG_VERSION_CMP(==, 7, 0, 0)
	#if !(CTL_COMPILER & CTL_COMPILER_FLAG_ZAPCC)
		#if CTL_COMPILER & CTL_COMPILER_FLAG_MSVC
			#undef CTL_COMPILER
			#define CTL_COMPILER CTL_COMPILER_ZAPCC_CL
		#else
			#undef CTL_COMPILER
			#define CTL_COMPILER CTL_COMPILER_ZAPCC
		#endif
	#endif
#endif
