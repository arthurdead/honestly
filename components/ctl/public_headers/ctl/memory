#pragma once

#include <cpa/compiler_builtins.hpp>
#include "type_traits"
#include "functional"
#include <version>
#include <memory>

namespace ctl
{
	template <typename T, typename D = std::default_delete<T>>
	class CPA_LOCAL_CLASS unique_ptr : public std::unique_ptr<T, D>
	{
		using base_type = std::unique_ptr<T, D>;

	public:
		using element_type = typename base_type::element_type;
		using pointer = typename base_type::pointer;
		using reference = element_type &;
		using const_reference = const element_type &;

		unique_ptr() noexcept = default;
		unique_ptr(unique_ptr &&) noexcept = default;
		unique_ptr &operator=(unique_ptr &&) noexcept = default;

		using base_type::unique_ptr;
		using base_type::operator=;

		inline unique_ptr(T &&obj) noexcept
			: base_type{new T{std::move(obj)}}
		{
		}

		template <typename ...Args>
		inline reference emplace(Args && ...args)
		{
			base_type::reset(new T{std::forward<Args>(args)...});
			return *base_type::get();
		}

		inline auto operator->() const noexcept
		{
			static constexpr const bool overloaded_deref{
				requires(const T &a)
				{ a.operator->(); }
			};

			if constexpr(overloaded_deref) {
				return base_type::operator->()->operator->();
			} else {
				return base_type::operator->();
			}
		}

		inline reference ref() const
		{ return *base_type::get(); }
		inline const_reference cref() const
		{ return *base_type::get(); }

	#ifdef STDI_GLIBCXX_CONCEPT_CHECKS
	public:
		constexpr inline void operator=(const unique_ptr &) noexcept
		{ CPA_TRAP; }
	#else
	private:
		unique_ptr &operator=(const unique_ptr &) = delete;
	#endif

	private:
		unique_ptr(const unique_ptr &) = delete;
	};

	class CPA_LOCAL_CLASS unique_ptr_opaque
	{
	public:
		unique_ptr_opaque() noexcept = default;
		unique_ptr_opaque(unique_ptr_opaque &&) noexcept = default;
		unique_ptr_opaque &operator=(unique_ptr_opaque &&) noexcept = default;

		template <typename T>
		inline unique_ptr_opaque(T *new_ptr) noexcept
			: ptr{new_ptr}, del_func{del_hlpr<T>}
		{
		}
		inline ~unique_ptr_opaque() noexcept
		{
			if(del_func && ptr) {
				del_func(ptr);
			}
		}

		template <typename T, typename ...Args>
		T &emplace(Args && ...args) noexcept;

		void reset(std::nullptr_t = nullptr) noexcept;
		template <typename T>
		void reset(T *new_ptr) noexcept;

		template <typename T>
		inline T &ref() const noexcept
		{ return *static_cast<T *>(ptr); }
		template <typename T>
		inline const T &cref() const noexcept
		{ return *static_cast<const T *>(ptr); }

		template <typename T>
		inline T *get() const noexcept
		{ return static_cast<T *>(ptr); }

		inline explicit operator bool() const noexcept
		{ return !!ptr; }

		template <typename T>
		inline T &operator*() const noexcept
		{ return *static_cast<T *>(ptr); }
		template <typename T>
		inline T *operator->() const noexcept
		{ return static_cast<T *>(ptr); }

		template <typename T>
		inline T *release() noexcept
		{
			T *ptr_tmp{static_cast<T *>(ptr)};
			ptr = nullptr;
			del_func = nullptr;
			return ptr_tmp;
		}

		void swap(unique_ptr_opaque &) = delete;

	private:
		unique_ptr_opaque(const unique_ptr_opaque &) = delete;
		unique_ptr_opaque &operator=(const unique_ptr_opaque &) = delete;

		template <typename T>
		static inline void del_hlpr(void *ptr) noexcept
		{ delete static_cast<T *>(ptr); }

		void *ptr;
		void (*del_func)(void *);
	};
}

#include "__details/memory.tpp"
