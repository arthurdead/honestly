#pragma once

#include "version"
#include "cstddef"
#include "utility"
#include "type_traits"

#define __CTL_FLAG_ENM_FNCS_IMPL(frnd, flags) \
	frnd constexpr inline flags operator&(flags rhs, flags lhs) noexcept \
	{ return static_cast<flags>(__CTL_TO_UNDERLYING(rhs) & __CTL_TO_UNDERLYING(lhs)); } \
	frnd constexpr inline flags operator|(flags rhs, flags lhs) noexcept \
	{ return static_cast<flags>(__CTL_TO_UNDERLYING(rhs) | __CTL_TO_UNDERLYING(lhs)); } \
	frnd constexpr inline flags operator^(flags rhs, flags lhs) noexcept \
	{ return static_cast<flags>(__CTL_TO_UNDERLYING(rhs) ^ __CTL_TO_UNDERLYING(lhs)); } \
	frnd constexpr inline flags operator~(flags rhs) noexcept \
	{ return static_cast<flags>(~__CTL_TO_UNDERLYING(rhs)); } \
	frnd constexpr inline flags &operator&=(flags &rhs, flags lhs) noexcept \
	{ return (rhs = static_cast<flags>(__CTL_TO_UNDERLYING(rhs) & __CTL_TO_UNDERLYING(lhs))); } \
	frnd constexpr inline flags &operator|=(flags &rhs, flags lhs) noexcept \
	{ return (rhs = static_cast<flags>(__CTL_TO_UNDERLYING(rhs) | __CTL_TO_UNDERLYING(lhs))); } \
	frnd constexpr inline flags &operator^=(flags &rhs, flags lhs) noexcept \
	{ return (rhs = static_cast<flags>(__CTL_TO_UNDERLYING(rhs) ^ __CTL_TO_UNDERLYING(lhs))); }

#define CTL_FLAG_ENUM_FUNCS(flags) __CTL_FLAG_ENM_FNCS_IMPL(CTL_NOTHING, flags)
#define CTL_CLASS_FLAG_ENUM_FUNCS(flags) __CTL_FLAG_ENM_FNCS_IMPL(friend, flags)

namespace ctl
{
	using ssize_t = std::make_signed_t<std::size_t>;

	template <typename T>
	constexpr inline bool has_bit(T val, T which) noexcept
	{ return static_cast<bool>(__CTL_TO_UNDERLYING(val) & __CTL_TO_UNDERLYING(which)); }
}
