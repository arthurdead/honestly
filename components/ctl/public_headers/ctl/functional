#pragma once

#include "version"
#include "utility"
#include <functional>

namespace ctl
{
	namespace __details_ref_wrapper
	{
		template <typename T>
		class CPA_LOCAL_CLASS reference_wrapper : public std::reference_wrapper<T>
		{
			using base_type = std::reference_wrapper<T>;

		public:
			using base_type::reference_wrapper;
			using base_type::operator=;

			constexpr inline T &operator*() const noexcept
			{ return base_type::get(); }
			constexpr inline T *operator->() const noexcept
			{ return &base_type::get(); }
		};

		template <typename T>
		struct is_ref_wrapper : std::false_type
		{
		};
	}

	template <typename T>
	class CPA_LOCAL_CLASS reference_wrapper : public __details_ref_wrapper::reference_wrapper<T>
	{
		using base_type = __details_ref_wrapper::reference_wrapper<T>;

	public:
		using __details_ref_wrapper::reference_wrapper<T>::reference_wrapper;
		using base_type::operator=;

		reference_wrapper(reference_wrapper<const T> &&other) = delete;
		reference_wrapper(const reference_wrapper<const T> &other) = delete;
		reference_wrapper &operator=(reference_wrapper<const T> &&other) = delete;
		reference_wrapper &operator=(const reference_wrapper<const T> &other) = delete;
	};

	template <typename T>
	class CPA_LOCAL_CLASS reference_wrapper<const T> : public __details_ref_wrapper::reference_wrapper<const T>
	{
		using base_type = __details_ref_wrapper::reference_wrapper<const T>;

	public:
		using __details_ref_wrapper::reference_wrapper<const T>::reference_wrapper;
		using base_type::operator=;

		constexpr inline reference_wrapper(reference_wrapper<T> &&other)
			: reference_wrapper{std::move(type_cast<reference_wrapper<const T>>(other))}
		{
		}
		constexpr inline reference_wrapper(const reference_wrapper<T> &other)
			: reference_wrapper{type_cast<reference_wrapper<const T>>(other)}
		{
		}
		constexpr inline reference_wrapper &operator=(reference_wrapper<T> &&other)
		{ return operator=(std::move(type_cast<reference_wrapper<const T>>(other))); }
		constexpr inline reference_wrapper &operator=(const reference_wrapper<T> &other)
		{ return operator=(type_cast<reference_wrapper<const T>>(other)); }
	};

	namespace __details_ref_wrapper
	{
		template <typename T>
		struct is_ref_wrapper<ctl::reference_wrapper<T>> : std::true_type
		{
		};
	}

	template <typename T>
	using ref_wrapper = reference_wrapper<T>;
	template <typename T>
	using cref_wrapper = reference_wrapper<const T>;

	template <typename T>
	constexpr inline reference_wrapper<T> ref(T &t) noexcept
	{ return reference_wrapper<T>{t}; }
	template <typename T>
	constexpr inline reference_wrapper<T> ref(reference_wrapper<T> t) noexcept
	{ return reference_wrapper<T>{t.get()}; }
	template <typename T>
	reference_wrapper<T> ref(T &&) = delete;

	template <typename T>
	constexpr inline reference_wrapper<const T> cref(const T &t) noexcept
	{ return reference_wrapper<const T>{t}; }
	template <typename T>
	constexpr inline reference_wrapper<const T> cref(reference_wrapper<const T> t) noexcept
	{ return reference_wrapper<const T>{t.get()}; }
	template <typename T>
	reference_wrapper<const T> cref(const T &&) = delete;
}
